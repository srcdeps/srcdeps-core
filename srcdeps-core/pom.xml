<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2015-2019 Maven Source Dependencies
    Plugin contributors as indicated by the @author tags.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.srcdeps.core</groupId>
    <artifactId>srcdeps-core-parent</artifactId>
    <version>5.0.2-SNAPSHOT</version>
  </parent>

  <artifactId>srcdeps-core</artifactId>
  <packaging>takari-jar</packaging>

  <name>Srcdeps Core</name>
  <description>Encapsulates the core srcdeps functionality</description>

  <dependencies>
    <dependency>
      <groupId>com.google.inject</groupId>
      <artifactId>guice</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>javax.inject</groupId>
      <artifactId>javax.inject</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.eclipse.jgit</groupId>
      <artifactId>org.eclipse.jgit</artifactId>
    </dependency>

    <dependency>
      <groupId>org.eclipse.sisu</groupId>
      <artifactId>org.eclipse.sisu.inject</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <plugins>

      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <configuration>
          <excludes combine.children="append">
            <exclude>src/test/resources/MavenSourceTree/*-expected/**</exclude>
          </excludes>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>antrun-copy</id>
            <phase>process-resources</phase>
            <configuration>
              <!-- We copy these Java classes to resources renaming them to .gradle because we want to inject them
                   to inner Gradle build's settings.gradle -->
              <target name="java-to-gradle">
                <copy file="${basedir}/src/main/java/org/srcdeps/core/SrcdepsInner.java" tofile="${project.build.outputDirectory}/gradle/settings/SrcdepsInner.gradle" />
                <copy file="${basedir}/src/main/java/org/srcdeps/core/GavSet.java" tofile="${project.build.outputDirectory}/gradle/settings/GavSet.gradle" />
                <copy file="${basedir}/src/main/java/org/srcdeps/core/GavPattern.java" tofile="${project.build.outputDirectory}/gradle/settings/GavPattern.gradle" />
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- To speed up the tests, we use the mrm-maven-plugin to proxy the local Maven repo of the main build so that
           the test child build does not have to download all the dependencies from the Central. -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>mrm-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>mrm-start</id>
            <phase>process-test-classes</phase>
            <goals>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>mrm-stop</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>filter-settings-mrm</id>
            <phase>process-test-classes</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <skip>false</skip>
              <resources>
                <resource>
                  <directory>src/test/resources</directory>
                  <include>settings-mrm.xml</include>
                  <filtering>true</filtering> <!-- to eval ${mrm.repository.url} set by mrm-maven-plugin -->
                </resource>
              </resources>
              <outputDirectory>${project.build.directory}</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <systemProperties>
            <project.basedir>${project.basedir}</project.basedir>
            <project.build.directory>${project.build.directory}</project.build.directory>
            <mrm.settings.xml>${project.build.directory}/settings-mrm.xml</mrm.settings.xml>
          </systemProperties>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.eclipse.sisu</groupId>
        <artifactId>sisu-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>index-project</id>
            <goals>
              <goal>main-index</goal>
              <goal>test-index</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>io.takari.maven.plugins</groupId>
        <artifactId>takari-lifecycle-plugin</artifactId>
        <configuration>
          <exportExcludes>
            <exportExclude>org/srcdeps/core/impl/**</exportExclude>
          </exportExcludes>
        </configuration>
      </plugin>


    </plugins>
  </build>

</project>
